/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: BetelgeuseMan (https://sketchfab.com/betelgeuseman)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/retrowave-lowpoly-car-remake-81c1d168da1a42e0a554dc295e289044
Title: Retrowave LowPoly Car (Remake)
*/

import React, { useRef, useEffect, useState } from "react"
import { useGLTF } from "@react-three/drei"
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'

import islandScene from '../assets/3d/island.glb'

const Island = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const islandRef = useRef()

  const {gl, viewport} = useThree()
  const {nodes, materials} = useGLTF(islandScene)

  const lastX = useRef(0)
  const rotationSpeed = useRef(0)
  const dampingFactor = 0.95

  const handlePointerDown = (e) => {
    e.stopPropagation()
    e.preventDefault()
    setIsRotating(true)

    const clientX = e.touches ? e.touches[0].clientX : e.clientX
    lastX.current = clientX
  }
  const handlePointerUp = (e) => {
    e.stopPropagation()
    e.preventDefault()
    setIsRotating(false)
  }
  const handlePointerMove = (e) => {
    e.stopPropagation()
    e.preventDefault()

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX
      const delta = (clientX - lastX.current) / viewport.width
      islandRef.current.rotation.y += delta * 0.01 * Math.PI
      lastX.current = clientX
      rotationSpeed.current = delta * 0.01 * Math.PI
    }
  }

  const handleKeyDown = (e) => {
    if (e.key === 'ArrowLeft') {
      if (!isRotating) setIsRotating(true)
      islandRef.current.rotation.y += 0.01 * Math.PI
      rotationSpeed.current = 0.0125
    } else if (e.key === 'ArrowRight') {
      if (!isRotating) setIsRotating(true)
      islandRef.current.rotation.y -= 0.01 * Math.PI
      rotationSpeed.current = -0.0125
    }
  }

  const handleKeyUp = (e) => {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
      setIsRotating(false)
    }
  }

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0
      }

      islandRef.current.rotation.y += rotationSpeed.current
    } else {
      const rotation = islandRef.current.rotation.y

      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI)

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4)
          break
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3)
          break
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2)
          break
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1)
          break
        default:
          setCurrentStage(null)
      }
    }
  })

  useEffect(() => {
    const canvas = gl.domElement
    canvas.addEventListener('pointerdown', handlePointerDown)
    canvas.addEventListener('pointerup', handlePointerUp)
    canvas.addEventListener('pointermove', handlePointerMove)
    document.addEventListener('keydown', handleKeyDown)
    document.addEventListener('keyup', handleKeyUp)

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown)
      canvas.removeEventListener('pointerup', handlePointerUp)
      canvas.removeEventListener('pointermove', handlePointerMove)
      document.removeEventListener('keydown', handleKeyDown)
      document.removeEventListener('keyup', handleKeyUp)
    }
  }, [gl, handlePointerUp, handlePointerDown, handlePointerMove])
  return (
    <a.group ref={islandRef} {...props}>
      <mesh
        geometry={nodes.Object_4.geometry}
        material={materials.mt_palette_main}
      />
      <mesh
        geometry={nodes.Object_5.geometry}
        material={materials.mt_palette_glass}
      />
      <mesh
        geometry={nodes.Object_7.geometry}
        material={materials.mt_palette_main}
      />
      <mesh
        geometry={nodes.Object_9.geometry}
        material={materials.mt_palette_main}
      />
      <mesh
        geometry={nodes.Object_10.geometry}
        material={materials.mt_palette_glass}
      />
      <mesh
        geometry={nodes.Object_12.geometry}
        material={materials.mt_palette_main}
        position={[0.599, 0.22, -0.953]}
      />
      <mesh
        geometry={nodes.Object_14.geometry}
        material={materials.mt_palette_main}
        position={[-0.599, 0.22, -0.953]}
      />
      <mesh
        geometry={nodes.Object_16.geometry}
        material={materials.mt_palette_main}
        position={[0.599, 0.22, 0.768]}
      />
      <mesh
        geometry={nodes.Object_18.geometry}
        material={materials.mt_palette_main}
        position={[-0.599, 0.22, 0.768]}
      />
      <mesh
        geometry={nodes.Object_20.geometry}
        material={materials.mt_palette_main}
      />
      <mesh
        geometry={nodes.Object_22.geometry}
        material={materials.mt_palette_main}
      />
    </a.group>
  )
}

export default Island
